# Prefix key
set-option -g prefix C-b
set-option -g prefix2 M-a
#unbind-key C-a
#bind-key C-a send-prefix

# Switch windows with Alt/option+num
run-shell 'for w in 0 $(seq 9); do tmux bind-key -n M-$w select-window -t $w; done'
# For xterm.js (macbook)
run-shell 'w=1; for k in ¡ ™ £ ¢ ∞ § ¶ • ª º; do tmux bind-key -n $k select-window -t $w && w=$((w+1)); done'

# Default shell
if-shell 'test -e /usr/bin/zsh' 'set -g default-shell /usr/bin/zsh' # Linux
if-shell 'test -e /Users && test ! -e /proc' 'set -g default-shell /opt/homebrew/bin/zsh' # MacOS


# Window and pane indexing
set -g base-index 1
setw -g pane-base-index 1

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi mode
setw -g mode-keys vi

# mouse behavior
# setw -g mouse on

set-option -g default-terminal screen-256color

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key v split-window -h
bind-key s split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane switching with awareness of vim splits
#bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
#bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
#bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
#bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
#bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
#bind C-l send-keys 'C-l'

# bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical

#set-window-option -g other-pane-height 25
#set-window-option -g other-pane-width 80
#set-window-option -g display-panes-time 1500
#set-window-option -g window-status-current-style fg=magenta

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

# map copy mode to ctrl+alt+c
bind-key -n C-s copy-mode

bind-key ] paste-buffer

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Status Bar
#set-option -g status-interval 1
#set-option -g status-style bg=black
#set-option -g status-style fg=white
#set -g status-left '#[fg=green]#H #[default]'
#set -g status-right '%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'

#set-option -g pane-active-border-style fg=yellow
#set-option -g pane-border-style fg=cyan

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Enable native Mac OS X copy/paste
#set-option -g default-command "/bin/zsh -c 'exec $(which zsh) -l'"

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# Always open new window based on current directory of the parent
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

source-file ~/.tmux_plugins.conf

# Overwrite tmux-sensible
set -gu default-command

# Status
set -ga status-right '#(exec $HOME/.local/bin/tmux-gitpod-cpumem)'
set -ga status-right '#(exec $HOME/.local/bin/dotfiles-spinner)'
